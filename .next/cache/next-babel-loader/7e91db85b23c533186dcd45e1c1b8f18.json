{"ast":null,"code":"import mongoose from \"mongoose\";\nimport withSession from \"../../lib/session\";\nconst CategorySchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  products: [{\n    type: mongoose.SchemaTypes.ObjectId,\n    ref: \"Product\"\n  }]\n});\nmongoose.connect(\"mongodb+srv://komsomolradio:irkytsk87@cluster0.melez.gcp.mongodb.net/vercel-amazemo?retryWrites=true&w=majority\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false\n});\nlet Category;\n\ntry {\n  // Trying to get the existing model to avoid OverwriteModelError\n  Category = mongoose.model(\"Category\");\n} catch {\n  Category = mongoose.model(\"Category\", CategorySchema);\n}\n\nexport default withSession(async (req, res) => {\n  const category = new Category({\n    name: req.body.name\n  });\n\n  try {\n    const savedCategory = await category.save();\n    return res.status(201).json(savedCategory);\n  } catch (e) {\n    return res.status(500).json(e);\n  }\n});","map":{"version":3,"sources":["C:/Users/daniel/Documents/react/next-iron-session/pages/api/create-category.ts"],"names":["mongoose","withSession","CategorySchema","Schema","name","type","String","required","unique","products","SchemaTypes","ObjectId","ref","connect","useNewUrlParser","useUnifiedTopology","useFindAndModify","Category","model","req","res","category","body","savedCategory","save","status","json","e"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,MAAMC,cAAc,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AACzCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,MAAM,EAAE;AAAxC,GADmC;AAEzCC,EAAAA,QAAQ,EAAE,CAAC;AAAEJ,IAAAA,IAAI,EAAEL,QAAQ,CAACU,WAAT,CAAqBC,QAA7B;AAAuCC,IAAAA,GAAG,EAAE;AAA5C,GAAD;AAF+B,CAApB,CAAvB;AAKAZ,QAAQ,CAACa,OAAT,CACE,iHADF,EAEE;AACEC,EAAAA,eAAe,EAAE,IADnB;AAEEC,EAAAA,kBAAkB,EAAE,IAFtB;AAGEC,EAAAA,gBAAgB,EAAE;AAHpB,CAFF;AASA,IAAIC,QAAJ;;AAEA,IAAI;AACF;AAEAA,EAAAA,QAAQ,GAAGjB,QAAQ,CAACkB,KAAT,CAAe,UAAf,CAAX;AACD,CAJD,CAIE,MAAM;AACND,EAAAA,QAAQ,GAAGjB,QAAQ,CAACkB,KAAT,CAAe,UAAf,EAA2BhB,cAA3B,CAAX;AACD;;AAED,eAAeD,WAAW,CAAC,OAAOkB,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,QAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAAEb,IAAAA,IAAI,EAAEe,GAAG,CAACG,IAAJ,CAASlB;AAAjB,GAAb,CAAjB;;AACA,MAAI;AACF,UAAMmB,aAAa,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA5B;AACA,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,aAArB,CAAP;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACV,WAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,CAArB,CAAP;AACD;AACF,CARyB,CAA1B","sourcesContent":["import mongoose from \"mongoose\";\r\nimport withSession from \"../../lib/session\";\r\nconst CategorySchema = new mongoose.Schema({\r\n  name: { type: String, required: true, unique: true },\r\n  products: [{ type: mongoose.SchemaTypes.ObjectId, ref: \"Product\" }],\r\n});\r\n\r\nmongoose.connect(\r\n  \"mongodb+srv://komsomolradio:irkytsk87@cluster0.melez.gcp.mongodb.net/vercel-amazemo?retryWrites=true&w=majority\",\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    useFindAndModify: false,\r\n  }\r\n);\r\n\r\nlet Category;\r\n\r\ntry {\r\n  // Trying to get the existing model to avoid OverwriteModelError\r\n\r\n  Category = mongoose.model(\"Category\");\r\n} catch {\r\n  Category = mongoose.model(\"Category\", CategorySchema);\r\n}\r\n\r\nexport default withSession(async (req, res) => {\r\n  const category = new Category({ name: req.body.name });\r\n  try {\r\n    const savedCategory = await category.save();\r\n    return res.status(201).json(savedCategory);\r\n  } catch (e) {\r\n    return res.status(500).json(e);\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}