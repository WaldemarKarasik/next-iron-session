{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function fetchJson() {\n  return _fetchJson.apply(this, arguments);\n}\n\nfunction _fetchJson() {\n  _fetchJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response,\n        data,\n        error,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch.apply(void 0, _args);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n            error = new Error(response.statusText);\n            error.response = response;\n            error.data = data;\n            throw error;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (!_context.t0.data) {\n              _context.t0.data = {\n                message: _context.t0.message\n              };\n            }\n\n            throw _context.t0;\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 15]]);\n  }));\n  return _fetchJson.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/daniel/Documents/react/next-iron-session/lib/fetchJson.js"],"names":["fetchJson","fetch","response","json","data","ok","error","Error","statusText","message"],"mappings":";;AAAA,wBAA8BA,SAA9B;AAAA;AAAA;;;wEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEYC,KAAK,MAAL,eAFZ;;AAAA;AAELC,YAAAA,QAFK;AAAA;AAAA,mBAMQA,QAAQ,CAACC,IAAT,EANR;;AAAA;AAMLC,YAAAA,IANK;;AAAA,iBAQPF,QAAQ,CAACG,EARF;AAAA;AAAA;AAAA;;AAAA,6CASFD,IATE;;AAAA;AAYLE,YAAAA,KAZK,GAYG,IAAIC,KAAJ,CAAUL,QAAQ,CAACM,UAAnB,CAZH;AAaXF,YAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACAI,YAAAA,KAAK,CAACF,IAAN,GAAaA,IAAb;AAdW,kBAeLE,KAfK;;AAAA;AAAA;AAAA;;AAiBX,gBAAI,CAAC,YAAMF,IAAX,EAAiB;AACf,0BAAMA,IAAN,GAAa;AAAEK,gBAAAA,OAAO,EAAE,YAAMA;AAAjB,eAAb;AACD;;AAnBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export default async function fetchJson(...args) {\r\n  try {\r\n    const response = await fetch(...args);\r\n\r\n    // if the server replies, there's always some data in json\r\n    // if there's a network error, it will throw at the previous line\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      return data;\r\n    }\r\n\r\n    const error = new Error(response.statusText);\r\n    error.response = response;\r\n    error.data = data;\r\n    throw error;\r\n  } catch (error) {\r\n    if (!error.data) {\r\n      error.data = { message: error.message };\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}