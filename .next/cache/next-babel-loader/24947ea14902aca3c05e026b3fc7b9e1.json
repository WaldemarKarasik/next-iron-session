{"ast":null,"code":"import withSession from \"../../lib/session\";\nimport mongoose from \"mongoose\";\nconst ProductSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  category: {\n    type: mongoose.SchemaTypes.ObjectId,\n    ref: \"Category\"\n  },\n  brand: String,\n  image: String,\n  price: Number,\n  rating: Number,\n  numReviews: Number,\n  countInStock: Number\n});\nmongoose.connect(\"mongodb+srv://komsomolradio:irkytsk87@cluster0.melez.gcp.mongodb.net/vercel-amazemo?retryWrites=true&w=majority\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false\n});\nlet Product;\n\ntry {\n  // Trying to get the existing model to avoid OverwriteModelError\n  Product = mongoose.model(\"Product\");\n} catch {\n  Product = mongoose.model(\"Product\", ProductSchema);\n}\n\nexport default withSession(async (req, res) => {\n  const newProduct = new Product(req.body);\n\n  try {\n    await newProduct.save();\n    return res.status(201).json(newProduct);\n  } catch (e) {\n    return res.json({\n      message: \"Failed to create product\",\n      ok: false\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/daniel/Documents/react/next-iron-session/pages/api/create-product.ts"],"names":["withSession","mongoose","ProductSchema","Schema","name","type","String","required","unique","category","SchemaTypes","ObjectId","ref","brand","image","price","Number","rating","numReviews","countInStock","connect","useNewUrlParser","useUnifiedTopology","useFindAndModify","Product","model","req","res","newProduct","body","save","status","json","e","message","ok"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AAEA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,aAAa,GAAG,IAAID,QAAQ,CAACE,MAAb,CAAoB;AACxCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,MAAM,EAAE;AAAxC,GADkC;AAExCC,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEJ,QAAQ,CAACS,WAAT,CAAqBC,QAA7B;AAAuCC,IAAAA,GAAG,EAAE;AAA5C,GAF8B;AAGxCC,EAAAA,KAAK,EAAEP,MAHiC;AAIxCQ,EAAAA,KAAK,EAAER,MAJiC;AAKxCS,EAAAA,KAAK,EAAEC,MALiC;AAMxCC,EAAAA,MAAM,EAAED,MANgC;AAOxCE,EAAAA,UAAU,EAAEF,MAP4B;AAQxCG,EAAAA,YAAY,EAAEH;AAR0B,CAApB,CAAtB;AAWAf,QAAQ,CAACmB,OAAT,CACE,iHADF,EAEE;AACEC,EAAAA,eAAe,EAAE,IADnB;AAEEC,EAAAA,kBAAkB,EAAE,IAFtB;AAGEC,EAAAA,gBAAgB,EAAE;AAHpB,CAFF;AASA,IAAIC,OAAJ;;AAEA,IAAI;AACF;AAEAA,EAAAA,OAAO,GAAGvB,QAAQ,CAACwB,KAAT,CAAe,SAAf,CAAV;AACD,CAJD,CAIE,MAAM;AACND,EAAAA,OAAO,GAAGvB,QAAQ,CAACwB,KAAT,CAAe,SAAf,EAA0BvB,aAA1B,CAAV;AACD;;AAED,eAAeF,WAAW,CAAC,OAAO0B,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,QAAMC,UAAU,GAAG,IAAIJ,OAAJ,CAAYE,GAAG,CAACG,IAAhB,CAAnB;;AACA,MAAI;AACF,UAAMD,UAAU,CAACE,IAAX,EAAN;AACA,WAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,UAArB,CAAP;AACD,GAHD,CAGE,OAAOK,CAAP,EAAU;AACV,WAAON,GAAG,CAACK,IAAJ,CAAS;AAAEE,MAAAA,OAAO,EAAE,0BAAX;AAAuCC,MAAAA,EAAE,EAAE;AAA3C,KAAT,CAAP;AACD;AACF,CARyB,CAA1B","sourcesContent":["import withSession from \"../../lib/session\";\r\n\r\nimport mongoose from \"mongoose\";\r\n\r\nconst ProductSchema = new mongoose.Schema({\r\n  name: { type: String, required: true, unique: true },\r\n  category: { type: mongoose.SchemaTypes.ObjectId, ref: \"Category\" },\r\n  brand: String,\r\n  image: String,\r\n  price: Number,\r\n  rating: Number,\r\n  numReviews: Number,\r\n  countInStock: Number,\r\n});\r\n\r\nmongoose.connect(\r\n  \"mongodb+srv://komsomolradio:irkytsk87@cluster0.melez.gcp.mongodb.net/vercel-amazemo?retryWrites=true&w=majority\",\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    useFindAndModify: false,\r\n  }\r\n);\r\n\r\nlet Product;\r\n\r\ntry {\r\n  // Trying to get the existing model to avoid OverwriteModelError\r\n\r\n  Product = mongoose.model(\"Product\");\r\n} catch {\r\n  Product = mongoose.model(\"Product\", ProductSchema);\r\n}\r\n\r\nexport default withSession(async (req, res) => {\r\n  const newProduct = new Product(req.body);\r\n  try {\r\n    await newProduct.save();\r\n    return res.status(201).json(newProduct);\r\n  } catch (e) {\r\n    return res.json({ message: \"Failed to create product\", ok: false });\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}